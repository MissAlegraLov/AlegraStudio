// ... [Importaciones y definiciones previas]

contract AlegraStudio is AccessControl, Pausable {
    // ... [Definiciones y constructores previos]

    mapping(address => address) public voteDelegates; // Dirección del delegado para cada usuario
    mapping(address => uint256) public endorsements; // Contador de endosos para cada proyecto
    uint256 public rewardRate = 1; // Tasa de recompensa para staking, definida como tokens adicionales por período (puede ser cambiado por el administrador)

    event Delegated(address indexed user, address indexed delegate);
    event Endorsed(address indexed user, address indexed project);
    event RewardClaimed(address indexed user, uint256 amount);

    // ... [Funciones previas]

    function delegateVoting(address _delegate) external whenNotPaused {
        require(stakedAmount[msg.sender] > 0, "You must have staked tokens to delegate");
        voteDelegates[msg.sender] = _delegate;
        emit Delegated(msg.sender, _delegate);
    }

    function claimStakingReward() external whenNotPaused {
        uint256 reward = stakedAmount[msg.sender].mul(rewardRate); // Calcular la recompensa basado en la cantidad de tokens apostados y la tasa de recompensa
        require(rewardToken.balanceOf(address(this)) >= reward, "Not enough tokens in contract to give rewards");
        require(rewardToken.transfer(msg.sender, reward), "Reward transfer failed");
        emit RewardClaimed(msg.sender, reward);
    }

    function endorseProject(address _project) external whenNotPaused {
        require(stakedAmount[msg.sender] > 0, "You must have staked tokens to endorse");
        endorsements[_project] = endorsements[_project].add(1);
        emit Endorsed(msg.sender, _project);
    }

    function setRewardRate(uint256 _newRate) external onlyRole(ADMIN_ROLE) whenNotPaused {
        rewardRate = _newRate;
    }
}
