// ... [Importaciones y definiciones previas]

contract AlegraStudio is AccessControl, Pausable {
    // ... [Definiciones y constructores previos]

    struct Proposal {
        string description;
        uint256 voteCount;
        bool executed;
    }

    Proposal[] public proposals;
    mapping(address => uint256) public stakedAmount;
    mapping(address => mapping(uint256 => bool)) public votesCast;

    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event ProposalCreated(uint256 proposalId, string description);
    event Voted(address indexed user, uint256 proposalId);

    // ... [Funciones previas]

    // Funcionalidad de staking
    function stakeTokens(uint256 _amount) external whenNotPaused {
        require(_amount > 0, "Cannot stake 0 tokens");
        require(rewardToken.transferFrom(msg.sender, address(this), _amount), "Token transfer failed");
        stakedAmount[msg.sender] = stakedAmount[msg.sender].add(_amount);
        emit Staked(msg.sender, _amount);
    }

    function withdrawStakedTokens(uint256 _amount) external whenNotPaused {
        require(stakedAmount[msg.sender] >= _amount, "Not enough staked tokens");
        stakedAmount[msg.sender] = stakedAmount[msg.sender].sub(_amount);
        require(rewardToken.transfer(msg.sender, _amount), "Token transfer failed");
        emit Withdrawn(msg.sender, _amount);
    }

    // Funcionalidad de votación
    function createProposal(string memory _description) external onlyRole(ADMIN_ROLE) whenNotPaused {
        proposals.push(Proposal({description: _description, voteCount: 0, executed: false}));
        emit ProposalCreated(proposals.length - 1, _description);
    }

    function vote(uint256 _proposalId) external whenNotPaused {
        require(!votesCast[msg.sender][_proposalId], "You have already voted on this proposal");
        require(stakedAmount[msg.sender] > 0, "You must have staked tokens to vote");

        proposals[_proposalId].voteCount = proposals[_proposalId].voteCount.add(1);
        votesCast[msg.sender][_proposalId] = true;
        emit Voted(msg.sender, _proposalId);
    }

    function executeProposal(uint256 _proposalId) external onlyRole(ADMIN_ROLE) whenNotPaused {
        require(!proposals[_proposalId].executed, "Proposal already executed");
        // ... [Lógica adicional para determinar y aplicar la decisión]

        proposals[_proposalId].executed = true;
    }

    // Funcionalidad para quemar tokens
    function burnTokens(uint256 _amount) external {
        require(rewardToken.transferFrom(msg.sender, address(this), _amount), "Token transfer failed");
        rewardToken.burn(_amount);
    }
}
